import numpy as np

class Params:
    '''
    defines parameters depending on lattice type. 
    taken from Nicholas matlab code
    Need to figure out how to return these values easily...
    Maybe put into main code??
    '''
    def __init__(self, lattice):
        self.latticename = lattice

        if lattice == '24':
            self.m_sea_s = 0.04
            self.m_seas_s_phys = 0.03224
            self.m_sea_s_pq = 0.03
            self.m_sea_l = [0.005, 0.010, 0.02]
            self.m_val_s = [0.030, 0.035, 0.040]
            self.n_l_m = 1
            self.n_uni_pi = 2
            self.kaon_f = 2
            self.kaon_l = 4
            self.n_m_val_l = 1
            self.n_m_val_s = len(self.m_val_s)
            self.n_m_sea_l = len(self.m_sea_l)
            self.norm = pow(24,3)
            self.twall = 1
            self.cps_conv = 1 ##???
            self.n_chan = 5;
        
        elif lattice == '32':
            self.m_sea_s = 0.04
            self.m_seas_s_phys = 0.02477
            self.m_sea_s_pq = 0.025
            self.m_sea_l = [0.004, 0.006, 0.008]
            self.m_val_s = [0.025, 0.030]
            self.n_l_m = 10
            self.n_uni_pi = 3
            self.kaon_f = 11
            self.kaon_l = 19
            self.n_m_val_l = 1
            self.m_m_val_s = len(self.m_val_s)
            self.n_m_sea_l = len(self.m_sea_l)
            self.norm = pow(32,3)
            self.twall = 1
            self.cps_conv = 3.2 ##???
            self.n_chan = 5;

        self.name_chan= ['bPS_bPS','bPS_bA0','bPS_pPS','bPS_pA0','bA0_pA0']
        self.sgn_chan = [1,-1,1,-1,1]
        self.n_src = 2;
        self.name_src = ['sr','sk']

 
 
def masses(m_val_s,m_sea_l, convention):

     '''
     set up indices and val q_m for given l seas q_m
     2 conventions - light-strange only
     & light-light + light-strange
     '''
     
     if convention==1:
         m_val1 = m_val_s
         m_val2 = m_sea_l #taking a light valence quark to have same mass as
         #sea quark
     if convention==2:
         m_val1 = np.hstack((m_sea_l,m_val_s))
         m_val2 = m_sea_l

     return m_val1, m_val2


def set_name_basis(i):
    if i==1:
        name_bas = 'Lattice basis'
    elif i==2:
        name_bas = 'SUSY basis'

    return name_bas
